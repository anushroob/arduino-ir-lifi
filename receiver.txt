#include <Wire.h>
#include <LiquidCrystal_I2C.h>

const int sensorPin = 2;   // IR sensor OUT
const int buzzerPin = 3;   // Buzzer pin
int bitDelay = 50;         // âœ… Faster delay (50ms)

LiquidCrystal_I2C lcd(0x27, 16, 2); 
int lcdCursorPos = 0;

unsigned long messageEndTime = 0;
bool waitingShown = true;

void setup() {
  pinMode(sensorPin, INPUT);
  pinMode(buzzerPin, OUTPUT);
  Serial.begin(9600);

  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Waiting...");
}

void loop() {
  if (messageEndTime > 0 && millis() - messageEndTime >= 10000) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Waiting...");
    lcdCursorPos = 0;
    messageEndTime = 0;
    waitingShown = true;
  }

  Serial.println("Waiting for start pulse...");

  while (digitalRead(sensorPin) == HIGH) {
    if (messageEndTime > 0 && millis() - messageEndTime >= 10000) {
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Waiting...");
      lcdCursorPos = 0;
      messageEndTime = 0;
      waitingShown = true;
    }
    delay(2);
  }

  unsigned long startTime = millis();
  while (digitalRead(sensorPin) == LOW);
  unsigned long pulseDuration = millis() - startTime;

  Serial.print("Start pulse duration: ");
  Serial.println(pulseDuration);

  if (pulseDuration >= bitDelay * 1.8) {
    delay(bitDelay);

    byte b = 0;
    for (int i = 7; i >= 0; i--) {
      int bitVal = readStableBit();
      if (bitVal == LOW) {
        b |= (1 << i);
      }
      delay(bitDelay);
    }

    if (b == 255) {
      Serial.println("End of message detected!");
      lcd.setCursor(0, 1);
      lcd.print("DONE          ");
      beepBuzzer();

      messageEndTime = millis();
      waitingShown = false;
    } else {
      if (lcdCursorPos == 0 && waitingShown) {
        lcd.clear();
        waitingShown = false;
      }

      char received = char(b);
      Serial.print("Received character: ");
      Serial.println(received);

      lcd.setCursor(lcdCursorPos % 16, lcdCursorPos / 16);
      lcd.print(received);
      lcdCursorPos++;

      if (lcdCursorPos >= 32) {
        lcd.clear();
        lcdCursorPos = 0;
      }
    }
  }

  delay(5);
}

int readStableBit() {
  int sum = 0;
  for (int i = 0; i < 3; i++) {
    sum += digitalRead(sensorPin);
    delay(1);
  }
  return (sum >= 2) ? HIGH : LOW;
}

void beepBuzzer() {
  digitalWrite(buzzerPin, HIGH);
  delay(200);
  digitalWrite(buzzerPin, LOW);
}
